// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using Allegory.Module.Customers;

// ReSharper disable once CheckNamespace
namespace Allegory.Module.Customers.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ICustomerAppService), typeof(CustomerClientProxy))]
public partial class CustomerClientProxy : ClientProxyBase<ICustomerAppService>, ICustomerAppService
{
    public virtual async Task<CustomerWithDetailsDto> GetAsync(Guid id)
    {
        return await RequestAsync<CustomerWithDetailsDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<CustomerDto>> GetListAsync(GetCustomerListDto input)
    {
        return await RequestAsync<PagedResultDto<CustomerDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetCustomerListDto), input }
        });
    }

    public virtual async Task<CustomerWithDetailsDto> CreateAsync(CustomerCreateDto input)
    {
        return await RequestAsync<CustomerWithDetailsDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CustomerCreateDto), input }
        });
    }

    public virtual async Task<CustomerWithDetailsDto> UpdateAsync(Guid id, CustomerUpdateDto input)
    {
        return await RequestAsync<CustomerWithDetailsDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CustomerUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
