// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using Allegory.Module.Customers;

// ReSharper disable once CheckNamespace
namespace Allegory.Module.Customers.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ICustomerGroupAppService), typeof(CustomerGroupClientProxy))]
public partial class CustomerGroupClientProxy : ClientProxyBase<ICustomerGroupAppService>, ICustomerGroupAppService
{
    public virtual async Task<CustomerGroupDto> GetAsync(Guid id)
    {
        return await RequestAsync<CustomerGroupDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<CustomerGroupDto> GetByCodeAsync(string code)
    {
        return await RequestAsync<CustomerGroupDto>(nameof(GetByCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), code }
        });
    }

    public virtual async Task<PagedResultDto<CustomerGroupDto>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<CustomerGroupDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<CustomerGroupDto> CreateAsync(CustomerGroupCreateUpdateDto input)
    {
        return await RequestAsync<CustomerGroupDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CustomerGroupCreateUpdateDto), input }
        });
    }

    public virtual async Task<CustomerGroupDto> UpdateAsync(Guid id, CustomerGroupCreateUpdateDto input)
    {
        return await RequestAsync<CustomerGroupDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CustomerGroupCreateUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
